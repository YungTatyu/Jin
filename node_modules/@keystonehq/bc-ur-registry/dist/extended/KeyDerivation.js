"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyDerivation = exports.DerivationAlgorithm = exports.Curve = void 0;
const RegistryType_1 = require("../RegistryType");
const RegistryItem_1 = require("../RegistryItem");
const lib_1 = require("../lib");
const CryptoKeypath_1 = require("../CryptoKeypath");
var Keys;
(function (Keys) {
    Keys[Keys["keyPaths"] = 1] = "keyPaths";
    Keys[Keys["curve"] = 2] = "curve";
    Keys[Keys["algo"] = 3] = "algo";
    Keys[Keys["origin"] = 4] = "origin";
})(Keys || (Keys = {}));
var Curve;
(function (Curve) {
    Curve["secp256k1"] = "secp256k1";
    Curve["ed25519"] = "ed25519";
})(Curve = exports.Curve || (exports.Curve = {}));
var DerivationAlgorithm;
(function (DerivationAlgorithm) {
    DerivationAlgorithm["slip10"] = "slip10";
    DerivationAlgorithm["bip32ed25519"] = "bip32ed25519";
})(DerivationAlgorithm = exports.DerivationAlgorithm || (exports.DerivationAlgorithm = {}));
class KeyDerivation extends RegistryItem_1.RegistryItem {
    constructor(keypaths, curve = Curve.secp256k1, algo = DerivationAlgorithm.slip10, origin) {
        super();
        this.keypaths = keypaths;
        this.curve = curve;
        this.algo = algo;
        this.origin = origin;
        this.getRegistryType = () => RegistryType_1.RegistryTypes.KEY_DERIVATION_CALL;
        this.getKeypaths = () => this.keypaths;
        this.getCurve = () => this.curve;
        this.getAlgo = () => this.algo;
        this.getOrigin = () => this.origin;
        this.toDataItem = () => {
            const map = {};
            map[Keys.keyPaths] = this.keypaths.map(keyPath => {
                const dataItem = keyPath.toDataItem();
                dataItem.setTag(keyPath.getRegistryType().getTag());
                return dataItem;
            });
            map[Keys.curve] = this.curve;
            map[Keys.algo] = this.algo;
            if (this.origin) {
                map[Keys.origin] = this.origin;
            }
            return new lib_1.DataItem(map);
        };
    }
}
exports.KeyDerivation = KeyDerivation;
KeyDerivation.fromDataItem = (dataItem) => {
    const map = dataItem.getData();
    const keypaths = map[Keys.keyPaths].map(keypath => CryptoKeypath_1.CryptoKeypath.fromDataItem(keypath));
    const curve = map[Keys.curve];
    const algo = map[Keys.algo];
    const origin = map[Keys.origin];
    return new KeyDerivation(keypaths, curve, algo, origin);
};
KeyDerivation.fromCBOR = (_cborPayload) => {
    const dataItem = lib_1.decodeToDataItem(_cborPayload);
    return KeyDerivation.fromDataItem(dataItem);
};
//# sourceMappingURL=KeyDerivation.js.map