import { Chain, ChainId, ChainName } from '@particle-network/chains';
import { WalletEntryPosition } from './components/walletEntry';
export declare class AuthError {
    code: number;
    message: string;
    constructor(code: number, message: string);
    static userCancelOperation(): AuthError;
    static unauthorized(): AuthError;
    static unsupportedMethod(): AuthError;
    static unsupportedChain(): AuthError;
    static paramsError(): AuthError;
    static notLogin(): AuthError;
    static walletNotCreated(): AuthError;
    static decrypt(message: string): AuthError;
}
export interface RequestArguments {
    method: string;
    params?: unknown;
}
export interface JsonRpcRequest extends RequestArguments {
    id: number | string;
    jsonrpc: string;
}
export interface JsonRpcError {
    code: number;
    message: string;
}
export interface JsonRpcResponse {
    id: number | string;
    jsonrpc: string;
    result?: any;
    error?: JsonRpcError;
}
export interface ParticleRpcRequest extends JsonRpcRequest {
    chainId: number;
}
export declare const AuthTypes: readonly ["email", "phone", "facebook", "google", "apple", "discord", "github", "twitch", "twitter", "microsoft", "linkedin", "jwt"];
declare type AuthTypeTuple = typeof AuthTypes;
export declare type AuthType = AuthTypeTuple[number];
export interface SecurityAccount {
    email?: string;
    phone?: string;
    has_set_payment_password: boolean;
    has_set_master_password: boolean;
    payment_password_updated_at?: string;
}
export interface UserInfo {
    uuid: string;
    token: string;
    wallets: Wallet[];
    name?: string;
    avatar?: string;
    phone?: string;
    email?: string;
    facebook_id?: string;
    facebook_email?: string;
    google_id?: string;
    google_email?: string;
    apple_id?: string;
    apple_email?: string;
    discord_id?: string;
    discord_email?: string;
    github_id?: string;
    github_email?: string;
    linkedin_id?: string;
    linkedin_email?: string;
    microsoft_id?: string;
    microsoft_email?: string;
    twitch_id?: string;
    twitch_email?: string;
    twitter_id?: string;
    twitter_email?: string;
    created_at?: string;
    updated_at?: string;
    thirdparty_user_info?: ThirdpartyUserInfo;
    jwt_id?: string;
    security_account?: SecurityAccount;
    signature?: string;
    message?: string;
}
export interface ThirdpartyUserInfo {
    provider: string;
    user_info: {
        id: string;
        name?: string;
        email?: string;
        picture?: string;
    };
}
export interface Wallet {
    uuid: string;
    chain_name: string;
    public_address: string;
}
export interface Config {
    projectId: string;
    clientKey: string;
    appId: string;
    chainName?: ChainName;
    chainId?: ChainId;
    securityAccount?: {
        promptSettingWhenSign?: SettingOption | boolean;
        promptMasterPasswordSettingWhenLogin?: SettingOption | boolean;
    };
    preload?: boolean;
    wallet?: WalletEntryOption;
}
export declare enum SettingOption {
    None = 0,
    Once = 1,
    Always = 2,
    Force = 3
}
export interface ModeStyle {
    colorAccent?: string;
    colorPrimary?: string;
    colorOnPrimary?: string;
    primaryButtonBackgroundColors?: [string, string];
    primaryIconButtonBackgroundColors?: [string, string];
    primaryIconTextColor?: string;
    primaryButtonTextColor?: string;
    cancelButtonBackgroundColor?: string;
    backgroundColors?: [string, [[string, string], [string, string]]];
    messageColors?: string[];
    borderGlowColors?: string[];
    modalMaskBackgroundColor?: string;
}
export interface WalletCustomStyle {
    supportAddToken?: boolean;
    supportChains?: Chain[];
    displayTokenAddresses?: string[];
    displayNFTContractAddresses?: string[];
    priorityTokenAddresses?: string[];
    priorityNFTContractAddresses?: string[];
    fiatCoin?: CurrencyUnit;
    evmSupportWalletConnect?: boolean;
    supportUIModeSwitch?: boolean;
    supportLanguageSwitch?: boolean;
    light?: ModeStyle;
    dark?: ModeStyle;
}
export interface WalletEntryOption {
    displayWalletEntry?: boolean;
    preload?: boolean;
    defaultWalletEntryPosition?: WalletEntryPosition;
    supportChains?: Chain[];
    uiMode?: UIMode;
    customStyle?: WalletCustomStyle;
}
export declare type UIMode = 'dark' | 'light' | 'auto';
export interface AuthThemeConfig {
    uiMode?: UIMode;
    displayCloseButton?: boolean;
    displayWallet?: boolean;
    modalBorderRadius?: number;
}
declare type PromptType = 'none' | 'consent' | 'select_account';
export interface LoginOptions {
    preferredAuthType?: AuthType;
    account?: string;
    supportAuthTypes?: string;
    socialLoginPrompt?: PromptType;
    hideLoading?: boolean;
    authorization?: {
        message?: string;
        uniq?: boolean;
    };
}
export declare type EVMProvider = any;
export declare type SolanaWallet = any;
export interface OpenBuyOptions {
    network?: string;
    fiatCoin?: string;
    cryptoCoin?: string;
    fiatAmt?: number;
    fixFiatCoin?: boolean;
    fixCryptoCoin?: boolean;
    fixFiatAmt?: boolean;
    walletAddress?: string;
}
export declare type OpenBuyOptionsKeys = keyof OpenBuyOptions;
export declare type CurrencyUnit = 'USD' | 'CNY' | 'JPY' | 'HKD' | 'INR' | 'KRW';
export declare type PrefixedHexString = string;
export declare type Base58String = string;
export declare type Base64String = string;
export declare type TxData = {
    nonce?: number | PrefixedHexString;
    gasPrice?: number | PrefixedHexString;
    gasLimit?: number | PrefixedHexString;
    from?: PrefixedHexString;
    to?: PrefixedHexString;
    value?: PrefixedHexString;
    data?: PrefixedHexString;
    type?: number | PrefixedHexString;
};
export interface EIP1559TxData extends TxData {
    chainId?: number | PrefixedHexString;
    gasPrice?: never;
    maxPriorityFeePerGas?: number | PrefixedHexString;
    maxFeePerGas?: number | PrefixedHexString;
}
export declare type ERC4337Options = {
    name: string;
    version: string;
};
export {};
