{
  "version": 3,
  "sources": ["../src/uuidv4.ts", "../src/url-crypto.ts"],
  "sourcesContent": ["import { v4 } from 'uuid';\n\nconst uuidv4 = () => v4().toString();\n\nexport default uuidv4;\n", "import CryptoJS from 'crypto-js';\nimport { v4 as uuidv4 } from 'uuid';\n\ntype DataEncoding = 'base64' | 'hex';\n\nexport function encryptUrlParam(params = {}, encoding: DataEncoding = 'base64'): string {\n    const secretKey = uuidv4().replace(/-/g, '').toUpperCase();\n    const cipherText = encryptData(params, secretKey, encoding);\n\n    return cipherText + secretKey;\n}\n\nexport function encryptData(data = {}, secretKey: string, encoding: DataEncoding = 'base64'): string {\n    if (typeof data !== 'string') {\n        data = JSON.stringify(data);\n    }\n    const keyWA = CryptoJS.enc.Utf8.parse(secretKey);\n    const cipherText = CryptoJS.AES.encrypt(data as string, keyWA, {\n        mode: CryptoJS.mode.ECB,\n        algorithm: CryptoJS.algo.AES,\n        padding: CryptoJS.pad.Pkcs7,\n        formatter: CryptoJS.format.Hex,\n    }).ciphertext;\n    if (encoding === 'base64') {\n        return encodeURIComponent(CryptoJS.enc.Base64.stringify(cipherText));\n    } else {\n        return CryptoJS.enc.Hex.stringify(cipherText).toUpperCase();\n    }\n}\n\nexport function decryptUrlParam(params: string, encoding: DataEncoding = 'base64'): string {\n    if (params) {\n        const secretKey = params.slice(-32);\n        const data = params.slice(0, params.length - 32);\n        return decryptData(data, secretKey, encoding);\n    } else {\n        return '';\n    }\n}\n\nexport function decryptData(params: string, secretKey: string, encoding: DataEncoding = 'base64'): string {\n    let dec;\n    if (encoding === 'base64') {\n        dec = CryptoJS.enc.Base64.parse(params);\n    } else {\n        dec = CryptoJS.enc.Hex.parse(params);\n    }\n    const keyWA = CryptoJS.enc.Utf8.parse(secretKey);\n    const bytes = CryptoJS.AES.decrypt(\n        CryptoJS.lib.CipherParams.create({\n            ciphertext: dec,\n            key: keyWA,\n            algorithm: CryptoJS.algo.AES,\n            padding: CryptoJS.pad.Pkcs7,\n            formatter: CryptoJS.format.Hex,\n        }),\n        keyWA,\n        {\n            mode: CryptoJS.mode.ECB,\n        }\n    );\n    return bytes.toString(CryptoJS.enc.Utf8);\n}\n"],
  "mappings": ";;;;;;;AAAA,SAAS,UAAU;AAEnB,IAAM,SAAS,MAAM,GAAG,EAAE,SAAS;AAEnC,IAAO,iBAAQ;;;ACJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAO,cAAc;AACrB,SAAS,MAAMA,eAAc;AAItB,SAAS,gBAAgB,SAAS,CAAC,GAAG,WAAyB,UAAkB;AACpF,QAAM,YAAYA,QAAO,EAAE,QAAQ,MAAM,EAAE,EAAE,YAAY;AACzD,QAAM,aAAa,YAAY,QAAQ,WAAW,QAAQ;AAE1D,SAAO,aAAa;AACxB;AAEO,SAAS,YAAY,OAAO,CAAC,GAAG,WAAmB,WAAyB,UAAkB;AACjG,MAAI,OAAO,SAAS,UAAU;AAC1B,WAAO,KAAK,UAAU,IAAI;AAAA,EAC9B;AACA,QAAM,QAAQ,SAAS,IAAI,KAAK,MAAM,SAAS;AAC/C,QAAM,aAAa,SAAS,IAAI,QAAQ,MAAgB,OAAO;AAAA,IAC3D,MAAM,SAAS,KAAK;AAAA,IACpB,WAAW,SAAS,KAAK;AAAA,IACzB,SAAS,SAAS,IAAI;AAAA,IACtB,WAAW,SAAS,OAAO;AAAA,EAC/B,CAAC,EAAE;AACH,MAAI,aAAa,UAAU;AACvB,WAAO,mBAAmB,SAAS,IAAI,OAAO,UAAU,UAAU,CAAC;AAAA,EACvE,OAAO;AACH,WAAO,SAAS,IAAI,IAAI,UAAU,UAAU,EAAE,YAAY;AAAA,EAC9D;AACJ;AAEO,SAAS,gBAAgB,QAAgB,WAAyB,UAAkB;AACvF,MAAI,QAAQ;AACR,UAAM,YAAY,OAAO,MAAM,GAAG;AAClC,UAAM,OAAO,OAAO,MAAM,GAAG,OAAO,SAAS,EAAE;AAC/C,WAAO,YAAY,MAAM,WAAW,QAAQ;AAAA,EAChD,OAAO;AACH,WAAO;AAAA,EACX;AACJ;AAEO,SAAS,YAAY,QAAgB,WAAmB,WAAyB,UAAkB;AACtG,MAAI;AACJ,MAAI,aAAa,UAAU;AACvB,UAAM,SAAS,IAAI,OAAO,MAAM,MAAM;AAAA,EAC1C,OAAO;AACH,UAAM,SAAS,IAAI,IAAI,MAAM,MAAM;AAAA,EACvC;AACA,QAAM,QAAQ,SAAS,IAAI,KAAK,MAAM,SAAS;AAC/C,QAAM,QAAQ,SAAS,IAAI;AAAA,IACvB,SAAS,IAAI,aAAa,OAAO;AAAA,MAC7B,YAAY;AAAA,MACZ,KAAK;AAAA,MACL,WAAW,SAAS,KAAK;AAAA,MACzB,SAAS,SAAS,IAAI;AAAA,MACtB,WAAW,SAAS,OAAO;AAAA,IAC/B,CAAC;AAAA,IACD;AAAA,IACA;AAAA,MACI,MAAM,SAAS,KAAK;AAAA,IACxB;AAAA,EACJ;AACA,SAAO,MAAM,SAAS,SAAS,IAAI,IAAI;AAC3C;",
  "names": ["uuidv4"]
}
