import type { WalletName } from '@solana/wallet-adapter-base';
import { BaseSignerWalletAdapter, WalletReadyState } from '@solana/wallet-adapter-base';
import type { Transaction, TransactionVersion, VersionedTransaction } from '@solana/web3.js';
import { PublicKey } from '@solana/web3.js';
import './polyfills/index.js';
export interface TrezorWalletAdapterConfig {
    derivationPath?: string;
    connectUrl?: string;
}
export declare const TrezorWalletName: WalletName<"Trezor">;
export declare class TrezorWalletAdapter extends BaseSignerWalletAdapter {
    name: WalletName<"Trezor">;
    url: string;
    icon: string;
    supportedTransactionVersions: ReadonlySet<TransactionVersion>;
    private _derivationPath;
    private _wallet;
    private _connectUrl;
    private _connecting;
    private _publicKey;
    private _readyState;
    constructor(config?: TrezorWalletAdapterConfig);
    get publicKey(): PublicKey | null;
    get connecting(): boolean;
    get readyState(): WalletReadyState;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    signTransaction<T extends Transaction | VersionedTransaction>(transaction: T): Promise<T>;
    private _onDeviceEvent;
    private _disconnected;
}
//# sourceMappingURL=adapter.d.ts.map