{
  "version": 3,
  "sources": ["../src/solana-wallet.ts", "../src/utils.ts", "../src/index.ts"],
  "sourcesContent": ["import { Auth, LoginOptions, UserInfo, rpcUrl } from '@particle-network/auth';\nimport { Connection, ConnectionConfig, PublicKey, Transaction } from '@solana/web3.js';\nimport bs58 from 'bs58';\nimport { Buffer } from 'buffer';\nimport { EventEmitter } from 'events';\nimport { ISolanaWallet } from './types';\nimport { getVersion } from './utils';\n\nexport class SolanaWallet implements ISolanaWallet {\n    public readonly isParticleNetwork = true;\n\n    name = 'Particle';\n    url = 'https://particle.network';\n    icon = 'https://static.particle.network/wallet-icons/Particle.png';\n\n    private _publicKey: PublicKey | null;\n\n    private _connecting: boolean;\n\n    private events = new EventEmitter();\n\n    constructor(private auth: Auth) {\n        this.auth = auth;\n        this._connecting = false;\n\n        const userInfo = this.auth.getUserInfo();\n        if (userInfo) {\n            const wallet = userInfo.wallets.find((w) => w.chain_name === 'solana' && w.public_address.length > 0);\n            if (wallet) {\n                this._publicKey = new PublicKey(wallet.public_address);\n            } else {\n                this._publicKey = null;\n            }\n        } else {\n            this._publicKey = null;\n        }\n\n        this.auth.on('connect', (userInfo: UserInfo) => {\n            const wallet = userInfo.wallets.find((w) => w.chain_name === 'solana' && w.public_address.length > 0);\n            if (wallet) {\n                this._publicKey = new PublicKey(wallet.public_address);\n                this.events.emit('connect', this._publicKey);\n            }\n        });\n        this.auth.on('disconnect', () => {\n            this._publicKey = null;\n            this.events.emit('disconnect');\n        });\n        if (typeof window !== 'undefined' && window.particle) {\n            window.particle.solanaWallet = this;\n        }\n    }\n\n    get version() {\n        return getVersion();\n    }\n\n    on(event: string, listener: any): void {\n        this.events.on(event, listener);\n    }\n\n    once(event: string, listener: any): void {\n        this.events.once(event, listener);\n    }\n\n    off(event: string, listener: any): void {\n        this.events.off(event, listener);\n    }\n\n    removeListener(event: string, listener: any): void {\n        this.events.removeListener(event, listener);\n    }\n\n    get connecting(): boolean {\n        return this._connecting;\n    }\n\n    get connected(): boolean {\n        return this._publicKey !== null;\n    }\n\n    get publicKey(): PublicKey | null {\n        return this._publicKey;\n    }\n\n    public async connect(config?: LoginOptions): Promise<void> {\n        try {\n            this._connecting = true;\n            let wallet = this.auth.getWallet();\n            if (wallet) {\n                this._publicKey = new PublicKey(wallet.public_address);\n                return Promise.resolve();\n            }\n            await this.auth.login(config);\n            wallet = this.auth.getWallet();\n            if (wallet) {\n                this._publicKey = new PublicKey(wallet.public_address);\n                return Promise.resolve();\n            } else {\n                return Promise.reject('wallet create failed');\n            }\n        } catch (e) {\n            return Promise.reject(e);\n        } finally {\n            this._connecting = false;\n        }\n    }\n\n    public async disconnect(): Promise<void> {\n        await this.auth.logout();\n        this._publicKey = null;\n        return Promise.resolve();\n    }\n\n    public async signTransaction(transaction: Transaction): Promise<Transaction> {\n        const signature = await this.auth.sign(\n            'signTransaction',\n            bs58.encode(transaction.serialize({ requireAllSignatures: false, verifySignatures: false }))\n        );\n        return Transaction.from(Buffer.from(signature, 'base64'));\n    }\n\n    public async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n        const signatures = await this.auth.signAllTransactions(\n            transactions.map((tx) =>\n                bs58.encode(tx.serialize({ requireAllSignatures: false, verifySignatures: false }))\n            )\n        );\n        return signatures.map((signed: string) => Transaction.from(Buffer.from(signed, 'base64')));\n    }\n\n    public async signAndSendTransaction(transaction: Transaction): Promise<string> {\n        return this.auth.sendTransaction(\n            bs58.encode(transaction.serialize({ requireAllSignatures: false, verifySignatures: false }))\n        );\n    }\n\n    public async signMessage(message: Uint8Array): Promise<Uint8Array> {\n        const signature = await this.auth.sign('signMessage', bs58.encode(message));\n        return Buffer.from(signature, 'base64');\n    }\n\n    public getConnection(config?: ConnectionConfig): Connection {\n        const url = `${rpcUrl()}/solana`;\n        return new Connection(\n            `${url}?chainId=${this.auth.getChainId()}&projectUuid=${this.auth.config.projectId}&projectKey=${\n                this.auth.config.clientKey\n            }`,\n            {\n                commitment: config?.commitment,\n                wsEndpoint: config?.wsEndpoint,\n                httpHeaders: {\n                    Authorization: this.auth.basicCredentials(),\n                },\n                fetch: config?.fetch,\n                fetchMiddleware: config?.fetchMiddleware,\n                disableRetryOnRateLimit: config?.disableRetryOnRateLimit,\n                confirmTransactionInitialTimeout: config?.confirmTransactionInitialTimeout,\n            }\n        );\n    }\n}\n", "export function getVersion(): string {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const packages = require('../package.json');\n    return `web_${packages.version}`;\n}\n", "export * from './solana-wallet';\nexport { ParticleNetwork } from '@particle-network/auth';\nexport type { Config } from '@particle-network/auth';\n"],
  "mappings": "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",
  "names": ["Buffer", "userInfo", "Buffer"]
}
