"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrezorConnectDynamicImpl = void 0;
const tslib_1 = require("tslib");
const factory_1 = require("@trezor/connect/lib/factory");
const core_in_iframe_1 = require("./impl/core-in-iframe");
const core_in_popup_1 = require("./impl/core-in-popup");
const proxy_event_emitter_1 = tslib_1.__importDefault(require("./utils/proxy-event-emitter"));
const connectSettings_1 = require("./connectSettings");
const IFRAME_ERRORS = ['Init_IframeBlocked', 'Init_IframeTimeout', 'Transport_Missing'];
class TrezorConnectDynamicImpl {
    constructor() {
        this.currentTarget = 'iframe';
        this.coreInIframeImpl = new core_in_iframe_1.CoreInIframe();
        this.coreInPopupImpl = new core_in_popup_1.CoreInPopup();
        this.eventEmitter = new proxy_event_emitter_1.default([
            this.coreInIframeImpl.eventEmitter,
            this.coreInPopupImpl.eventEmitter,
        ]);
    }
    getTarget() {
        return this.currentTarget === 'iframe' ? this.coreInIframeImpl : this.coreInPopupImpl;
    }
    async switchTarget(target) {
        if (this.currentTarget === target) {
            return;
        }
        await this.getTarget().dispose();
        this.currentTarget = target;
        await this.getTarget().init(this.lastSettings);
    }
    manifest(manifest) {
        this.lastSettings = Object.assign(Object.assign({}, this.lastSettings), { manifest });
        this.getTarget().manifest(manifest);
    }
    async init(settings = {}) {
        const env = (0, connectSettings_1.getEnv)();
        if (settings.coreMode === 'iframe' || settings.popup === false || env === 'webextension') {
            this.currentTarget = 'iframe';
        }
        else if (settings.coreMode === 'popup') {
            this.currentTarget = 'core-in-popup';
        }
        else {
            settings.coreMode = 'auto';
            this.currentTarget = 'iframe';
        }
        this.lastSettings = settings;
        try {
            return await this.getTarget().init(settings);
        }
        catch (error) {
            if (await this.handleErrorFallback(error.code)) {
                return await this.getTarget().init(settings);
            }
            throw error;
        }
    }
    async call(params) {
        const response = await this.getTarget().call(params);
        if (!response.success) {
            if (await this.handleErrorFallback(response.payload.code)) {
                return await this.getTarget().call(params);
            }
        }
        return response;
    }
    async handleErrorFallback(errorCode) {
        var _a, _b;
        if (((_a = this.lastSettings) === null || _a === void 0 ? void 0 : _a.coreMode) === 'auto' && IFRAME_ERRORS.includes(errorCode)) {
            const webUsbUnavailableInBrowser = !navigator.usb;
            const webUsbDisabledInSettings = ((_b = this.lastSettings.transports) === null || _b === void 0 ? void 0 : _b.includes('WebUsbTransport')) === false ||
                this.lastSettings.webusb === false;
            if (errorCode === 'Transport_Missing' &&
                (webUsbUnavailableInBrowser || webUsbDisabledInSettings)) {
                return false;
            }
            await this.switchTarget('core-in-popup');
            return true;
        }
        return false;
    }
    requestLogin(params) {
        return this.getTarget().requestLogin(params);
    }
    uiResponse(params) {
        return this.getTarget().uiResponse(params);
    }
    renderWebUSBButton() {
        return this.getTarget().renderWebUSBButton();
    }
    disableWebUSB() {
        return this.getTarget().disableWebUSB();
    }
    requestWebUSBDevice() {
        return this.getTarget().requestWebUSBDevice();
    }
    cancel(error) {
        return this.getTarget().cancel(error);
    }
    dispose() {
        this.eventEmitter.removeAllListeners();
        return this.getTarget().dispose();
    }
}
exports.TrezorConnectDynamicImpl = TrezorConnectDynamicImpl;
const impl = new TrezorConnectDynamicImpl();
const TrezorConnect = (0, factory_1.factory)({
    eventEmitter: impl.eventEmitter,
    init: impl.init.bind(impl),
    call: impl.call.bind(impl),
    manifest: impl.manifest.bind(impl),
    requestLogin: impl.requestLogin.bind(impl),
    uiResponse: impl.uiResponse.bind(impl),
    renderWebUSBButton: impl.renderWebUSBButton.bind(impl),
    disableWebUSB: impl.disableWebUSB.bind(impl),
    requestWebUSBDevice: impl.requestWebUSBDevice.bind(impl),
    cancel: impl.cancel.bind(impl),
    dispose: impl.dispose.bind(impl),
});
exports.default = TrezorConnect;
tslib_1.__exportStar(require("@trezor/connect/lib/exports"), exports);
//# sourceMappingURL=index.js.map