import EventEmitter from 'events';
import { UiResponseEvent, CallMethodPayload, CallMethodAnyResponse } from '@trezor/connect/lib/events';
import type { ConnectSettings, ConnectSettingsPublic, Manifest, Response } from '@trezor/connect/lib/types';
import { ConnectFactoryDependencies } from '@trezor/connect/lib/factory';
import { Log } from '@trezor/connect/lib/utils/debug';
import { Login } from '@trezor/connect/lib/types/api/requestLogin';
export declare class CoreInPopup implements ConnectFactoryDependencies {
    eventEmitter: EventEmitter<[never]>;
    protected _settings: ConnectSettings;
    protected logger: Log;
    protected popupManagerLogger: Log;
    private _popupManager?;
    constructor();
    private logWriterFactory;
    manifest(data: Manifest): void;
    dispose(): Promise<undefined>;
    cancel(error?: string): void;
    init(settings?: Partial<ConnectSettingsPublic>): Promise<void>;
    call(params: CallMethodPayload): Promise<CallMethodAnyResponse>;
    private callInit;
    uiResponse(response: UiResponseEvent): void;
    renderWebUSBButton(): void;
    requestLogin(): Response<Login>;
    disableWebUSB(): void;
    requestWebUSBDevice(): void;
}
export declare const TrezorConnect: import("@trezor/connect/lib/types").TrezorConnect;
//# sourceMappingURL=core-in-popup.d.ts.map