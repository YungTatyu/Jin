import { ConnectFactoryDependencies } from '@trezor/connect/lib/factory';
import type { ConnectSettings, ConnectSettingsPublic, Manifest } from '@trezor/connect/lib/types';
import EventEmitter from 'events';
import { CallMethodPayload } from '@trezor/connect/lib/events';
export declare class TrezorConnectDynamicImpl implements ConnectFactoryDependencies {
    eventEmitter: EventEmitter;
    private currentTarget;
    private coreInIframeImpl;
    private coreInPopupImpl;
    private lastSettings?;
    constructor();
    private getTarget;
    private switchTarget;
    manifest(manifest: Manifest): void;
    init(settings?: Partial<ConnectSettingsPublic>): Promise<void>;
    call(params: CallMethodPayload): Promise<import("@trezor/connect/lib/types").Unsuccessful | import("@trezor/connect/lib/types").Success<{
        message: string;
    }> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types").AuthenticateDeviceResult> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types").Address> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types").Address[]> | import("@trezor/connect/lib/types").Success<{
        path: number[];
        publicKey: string;
        serializedPath: string;
    }> | import("@trezor/connect/lib/types").Success<{
        path: number[];
        publicKey: string;
        serializedPath: string;
    }[]> | import("@trezor/connect/lib/types").Success<{
        signature: string;
        public_key: string;
    }> | import("@trezor/connect/lib/types").Success<{
        disconnected: boolean;
    }> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types/api/blockchainEstimateFee").BlockchainEstimatedFee> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types/api/blockchainEstimateFee").BlockchainEstimatedFeeLevel> | import("@trezor/connect/lib/types").Success<import("@trezor/blockchain-link-types/lib/common").AccountBalanceHistory[]> | import("@trezor/connect/lib/types").Success<{
        ts: number;
        rates: import("@trezor/blockchain-link-types/lib/common").FiatRatesBySymbol;
    }> | import("@trezor/connect/lib/types").Success<{
        tickers: {
            ts: number;
            rates: import("@trezor/blockchain-link-types/lib/common").FiatRatesBySymbol;
        }[];
    }> | import("@trezor/connect/lib/types").Success<import("@trezor/blockchain-link-types/lib/common").Transaction[]> | import("@trezor/connect/lib/types").Success<boolean> | import("@trezor/connect/lib/types").Success<{
        subscribed: boolean;
    }> | import("@trezor/connect/lib/types").Success<{
        subscribed: boolean;
    }> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types").CardanoAddress> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types").CardanoAddress[]> | import("@trezor/connect/lib/types").Success<{
        scriptHash: string;
    }> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types").CardanoPublicKey> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types").CardanoPublicKey[]> | import("@trezor/connect/lib/types").Success<{
        auxiliaryDataSupplement?: {
            cVoteRegistrationSignature?: string | undefined;
            type: import("@trezor/protobuf/lib/messages-schema").CardanoTxAuxiliaryDataSupplementType;
            auxiliaryDataHash: string;
        } | undefined;
        hash: string;
        witnesses: {
            chainCode?: string | undefined;
            type: import("@trezor/protobuf/lib/messages-schema").CardanoTxWitnessType;
            signature: string;
            pubKey: string;
        }[];
    }> | import("@trezor/connect/lib/types").Success<{
        auxiliaryDataSupplement?: {
            cVoteRegistrationSignature?: string | undefined;
            type: import("@trezor/protobuf/lib/messages-schema").CardanoTxAuxiliaryDataSupplementType;
            auxiliaryDataHash: string;
        } | undefined;
        hash: string;
        witnesses: {
            chainCode?: string | undefined;
            type: import("@trezor/protobuf/lib/messages-schema").CardanoTxWitnessType;
            signature: string;
            pubKey: string;
        }[];
    } & {
        serializedTx: string;
    }> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types").PrecomposedTransactionCardano[]> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types/api/cipherKeyValue").CipheredValue> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types/api/cipherKeyValue").CipheredValue[]> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types/api/composeTransaction").SignedTransaction> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types").PrecomposedResult[]> | import("@trezor/connect/lib/types").Success<{
        path: number[];
        serializedPath: string;
        wifPublicKey: string;
        rawPublicKey: string;
    }> | import("@trezor/connect/lib/types").Success<{
        path: number[];
        serializedPath: string;
        wifPublicKey: string;
        rawPublicKey: string;
    }[]> | import("@trezor/connect/lib/types").Success<{
        signature: string;
    }> | import("@trezor/connect/lib/types").Success<{
        xpubSegwit?: string | undefined;
        descriptorChecksum?: string | undefined;
        path: number[];
        publicKey: string;
        serializedPath: string;
        chainCode: string;
        childNum: number;
        xpub: string;
        fingerprint: number;
        depth: number;
    }> | import("@trezor/connect/lib/types").Success<{
        xpubSegwit?: string | undefined;
        descriptorChecksum?: string | undefined;
        path: number[];
        publicKey: string;
        serializedPath: string;
        chainCode: string;
        childNum: number;
        xpub: string;
        fingerprint: number;
        depth: number;
    }[]> | import("@trezor/connect/lib/types").Success<{
        address: string;
        signature: string;
    }> | import("@trezor/connect/lib/types").Success<{
        s: string;
        v: string;
        r: string;
        serializedTx: string;
    }> | import("@trezor/connect/lib/types").Success<{
        address: string;
        signature: string;
    }> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types/api/firmwareUpdate").FirmwareUpdateResponse> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types/api/getAccountDescriptor").GetAccountDescriptorResponse> | import("@trezor/connect/lib/types").Success<(import("@trezor/connect/lib/types/api/getAccountDescriptor").GetAccountDescriptorResponse | null)[]> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types").AccountInfo> | import("@trezor/connect/lib/types").Success<(import("@trezor/connect/lib/types").AccountInfo | null)[]> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types").Address & {
        mac?: string | undefined;
        address: string;
    }> | import("@trezor/connect/lib/types").Success<(import("@trezor/connect/lib/types").Address & {
        mac?: string | undefined;
        address: string;
    })[]> | import("@trezor/connect/lib/types").Success<({
        blockchainLink?: {
            type: string;
            url: string[];
        } | undefined;
        name: string;
        label: string;
        blockTime: number;
        minFee: number;
        maxFee: number;
        shortcut: string;
        slip44: number;
        support: {
            T2B1: string | false;
            T3B1: string | false;
            T3T1: string | false;
            T1B1: string | false;
            T2T1: string | false;
            connect: boolean;
        };
        decimals: number;
        defaultFees: {
            feeLimit?: string | undefined;
            feePerTx?: string | undefined;
            label: "high" | "normal" | "economy" | "low" | "custom";
            feePerUnit: string;
            blocks: number;
        }[];
    } & {
        cashAddrPrefix?: string | undefined;
        xPubMagicSegwitNative?: number | undefined;
        xPubMagicSegwit?: number | undefined;
        taproot?: boolean | undefined;
        type: "bitcoin";
        dustLimit: number;
        curveName: string;
        forceBip143: boolean;
        hashGenesisBlock: string;
        maxAddressLength: number;
        maxFeeSatoshiKb: number;
        minAddressLength: number;
        minFeeSatoshiKb: number;
        segwit: boolean;
        xPubMagic: number;
        network: {
            forkId?: number | undefined;
            scriptHash: number;
            messagePrefix: string;
            bech32: string;
            bip32: {
                public: number;
                private: number;
            };
            pubKeyHash: number;
            wif: number;
        };
        isBitcoin: boolean;
    }) | ({
        blockchainLink?: {
            type: string;
            url: string[];
        } | undefined;
        name: string;
        label: string;
        blockTime: number;
        minFee: number;
        maxFee: number;
        shortcut: string;
        slip44: number;
        support: {
            T2B1: string | false;
            T3B1: string | false;
            T3T1: string | false;
            T1B1: string | false;
            T2T1: string | false;
            connect: boolean;
        };
        decimals: number;
        defaultFees: {
            feeLimit?: string | undefined;
            feePerTx?: string | undefined;
            label: "high" | "normal" | "economy" | "low" | "custom";
            feePerUnit: string;
            blocks: number;
        }[];
    } & {
        network?: undefined;
        type: "ethereum";
        chainId: number;
    }) | ({
        blockchainLink?: {
            type: string;
            url: string[];
        } | undefined;
        name: string;
        label: string;
        blockTime: number;
        minFee: number;
        maxFee: number;
        shortcut: string;
        slip44: number;
        support: {
            T2B1: string | false;
            T3B1: string | false;
            T3T1: string | false;
            T1B1: string | false;
            T2T1: string | false;
            connect: boolean;
        };
        decimals: number;
        defaultFees: {
            feeLimit?: string | undefined;
            feePerTx?: string | undefined;
            label: "high" | "normal" | "economy" | "low" | "custom";
            feePerUnit: string;
            blocks: number;
        }[];
    } & {
        network?: undefined;
        type: "misc" | "nem";
        curve: string;
    })> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types/api/getDeviceState").DeviceStateResponse> | import("@trezor/connect/lib/types").Success<{
        hide_passphrase_from_host?: boolean | undefined;
        haptic_feedback?: boolean | undefined;
        _passphrase_cached?: boolean | undefined;
        busy?: boolean | undefined;
        homescreen_format?: "Toif" | "Jpeg" | "ToiG" | undefined;
        unit_color?: number | undefined;
        unit_btconly?: boolean | undefined;
        homescreen_width?: number | undefined;
        homescreen_height?: number | undefined;
        bootloader_locked?: boolean | undefined;
        language_version_matches?: boolean | undefined;
        unit_packaging?: number | undefined;
        recovery_type?: "NormalRecovery" | "DryRun" | "UnlockRepeatedBackup" | undefined;
        optiga_sec?: number | undefined;
        label: string | null;
        flags: number | null;
        language: string | null;
        passphrase_always_on_device: boolean | null;
        safety_checks: "Strict" | "PromptAlways" | "PromptTemporarily" | null;
        auto_lock_delay_ms: number | null;
        display_rotation: number | null;
        experimental_features: boolean | null;
        vendor: string;
        major_version: number;
        minor_version: number;
        patch_version: number;
        bootloader_mode: boolean | null;
        device_id: string | null;
        pin_protection: boolean | null;
        passphrase_protection: boolean | null;
        initialized: boolean | null;
        revision: string | null;
        bootloader_hash: string | null;
        imported: boolean | null;
        unlocked: boolean | null;
        firmware_present: boolean | null;
        backup_availability: "NotAvailable" | "Required" | "Available" | null;
        model: string;
        fw_major: number | null;
        fw_minor: number | null;
        fw_patch: number | null;
        fw_vendor: string | null;
        unfinished_backup: boolean | null;
        no_backup: boolean | null;
        recovery_status: "Nothing" | "Recovery" | "Backup" | null;
        capabilities: ("Capability_Bitcoin" | "Capability_Bitcoin_like" | "Capability_Binance" | "Capability_Cardano" | "Capability_Crypto" | "Capability_EOS" | "Capability_Ethereum" | "Capability_Lisk" | "Capability_Monero" | "Capability_NEM" | "Capability_Ripple" | "Capability_Stellar" | "Capability_Tezos" | "Capability_U2F" | "Capability_Shamir" | "Capability_ShamirGroups" | "Capability_PassphraseEntry" | "Capability_Solana" | "Capability_Translations" | "Capability_Brightness" | "Capability_Haptic")[];
        backup_type: "Bip39" | "Slip39_Basic" | "Slip39_Advanced" | "Slip39_Single_Extendable" | "Slip39_Basic_Extendable" | "Slip39_Advanced_Extendable" | null;
        sd_card_present: boolean | null;
        sd_protection: boolean | null;
        wipe_code_protection: boolean | null;
        session_id: string | null;
        internal_model: import("@trezor/protobuf/lib/messages-schema").DeviceModelInternal;
    }> | import("@trezor/connect/lib/types").Success<{
        hash: string;
    }> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types/api/getOwnershipId").OwnershipId> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types/api/getOwnershipId").OwnershipId[]> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types/api/getOwnershipProof").OwnershipProof> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types/api/getOwnershipProof").OwnershipProof[]> | import("@trezor/connect/lib/types").Success<ConnectSettings> | import("@trezor/connect/lib/types").Success<{
        data: string;
        signature: string;
    }> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types/api/pushTransaction").PushedTransaction> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types/api/requestLogin").Login> | import("@trezor/connect/lib/types").Success<{
        signature: string;
        serializedTx: string;
    }> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types").SignedTransaction> | import("@trezor/connect/lib/types").Success<{
        path: number[];
        publicKey: string;
        serializedPath: string;
    } & {
        publicKey: string;
    }> | import("@trezor/connect/lib/types").Success<({
        path: number[];
        publicKey: string;
        serializedPath: string;
    } & {
        publicKey: string;
    })[]> | import("@trezor/connect/lib/types").Success<{
        signature: string;
    }> | import("@trezor/connect/lib/types").Success<{
        publicKey: string;
        signature: string;
    }> | import("@trezor/connect/lib/types").Success<{
        signature: string;
        sig_op_contents: string;
        operation_hash: string;
    }> | import("@trezor/connect/lib/types").Success<{
        mac?: string | undefined;
        address_n: number[];
    }> | import("@trezor/connect/lib/types").Success<import("@trezor/connect/lib/types/api/checkFirmwareAuthenticity").CheckFirmwareAuthenticityResponse> | {
        id: number;
        success: boolean;
        payload: any;
    }>;
    private handleErrorFallback;
    requestLogin(params: any): import("@trezor/connect/lib/types").Response<import("@trezor/connect/lib/types/api/requestLogin").Login> | Promise<import("@trezor/connect/lib/types").Unsuccessful | {
        id: number;
        success: boolean;
        payload: any;
    }>;
    uiResponse(params: any): void;
    renderWebUSBButton(): void;
    disableWebUSB(): void;
    requestWebUSBDevice(): void | Promise<void>;
    cancel(error?: string): void;
    dispose(): Promise<undefined>;
}
declare const TrezorConnect: import("@trezor/connect/lib/types").TrezorConnect;
export default TrezorConnect;
export * from '@trezor/connect/lib/exports';
//# sourceMappingURL=index.d.ts.map