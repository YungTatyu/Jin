"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTransaction = createTransaction;
function convertOutput(selectedOutput, composeOutput) {
    if (composeOutput.type === 'change') {
        return Object.assign(Object.assign({}, composeOutput), { amount: selectedOutput.value.toString() });
    }
    if (composeOutput.type === 'opreturn') {
        return composeOutput;
    }
    return Object.assign(Object.assign({}, composeOutput), { type: 'payment', amount: selectedOutput.value.toString() });
}
function inputComparator(a, b) {
    return Buffer.from(a.txid, 'hex').compare(Buffer.from(b.txid, 'hex')) || a.vout - b.vout;
}
function outputComparator(a, b) {
    return (a.value.cmp(b.value) ||
        (Buffer.isBuffer(a.script) && Buffer.isBuffer(b.script)
            ? a.script.compare(b.script)
            : a.script.length - b.script.length));
}
function createTransaction(request, result) {
    const convertedInputs = result.inputs.map(input => request.utxos[input.i]);
    const defaultPermutation = [];
    const convertedOutputs = result.outputs.map((output, index) => {
        defaultPermutation.push(index);
        if (request.outputs[index]) {
            return convertOutput(output, request.outputs[index]);
        }
        return convertOutput(output, Object.assign({ type: 'change' }, request.changeAddress));
    });
    if (request.skipPermutation) {
        return {
            inputs: convertedInputs,
            outputs: convertedOutputs,
            outputsPermutation: defaultPermutation,
        };
    }
    const permutation = defaultPermutation.sort((a, b) => outputComparator(result.outputs[a], result.outputs[b]));
    const sortedOutputs = permutation.map(index => convertedOutputs[index]);
    return {
        inputs: convertedInputs.sort(inputComparator),
        outputs: sortedOutputs,
        outputsPermutation: permutation,
    };
}
//# sourceMappingURL=transaction.js.map