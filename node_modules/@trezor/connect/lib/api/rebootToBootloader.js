"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AbstractMethod_1 = require("../core/AbstractMethod");
const paramsValidator_1 = require("./common/paramsValidator");
const events_1 = require("../events");
const schema_utils_1 = require("@trezor/schema-utils");
const constants_1 = require("../constants");
class RebootToBootloader extends AbstractMethod_1.AbstractMethod {
    init() {
        this.allowDeviceMode = [events_1.UI.INITIALIZE, events_1.UI.SEEDLESS];
        this.skipFinalReload = true;
        this.keepSession = false;
        this.requiredPermissions = ['management'];
        this.useDeviceState = false;
        this.firmwareRange = (0, paramsValidator_1.getFirmwareRange)(this.name, null, this.firmwareRange);
        const { payload } = this;
        (0, schema_utils_1.Assert)(constants_1.PROTO.RebootToBootloader, payload);
        this.params = {
            boot_command: payload.boot_command,
            firmware_header: payload.firmware_header,
            language_data_length: payload.language_data_length,
        };
    }
    get info() {
        return 'Reboot to bootloader';
    }
    get confirmation() {
        return {
            view: 'device-management',
            customConfirmButton: {
                className: 'confirm',
                label: `Reboot`,
            },
            label: 'Are you sure you want to reboot to bootloader?',
        };
    }
    async run() {
        const cmd = this.device.getCommands();
        const response = await cmd.typedCall('RebootToBootloader', 'Success', this.params);
        return response.message;
    }
}
exports.default = RebootToBootloader;
//# sourceMappingURL=rebootToBootloader.js.map