import { TSchema, Static } from '@trezor/schema-utils';
import { DeviceState } from './device';
export interface CommonParams {
    device?: {
        path?: string;
        state?: string | DeviceState;
        instance?: number;
    };
    useEmptyPassphrase?: boolean;
    useEventListener?: boolean;
    allowSeedlessDevice?: boolean;
    keepSession?: boolean;
    override?: boolean;
    skipFinalReload?: boolean;
    useCardanoDerivation?: boolean;
    chunkify?: boolean;
}
export type Params<T> = CommonParams & T & {
    bundle?: undefined;
};
interface Bundle<T> {
    bundle: T[];
}
export declare const Bundle: <T extends TSchema>(type: T) => import("@trezor/schema-utils").TObject<{
    bundle: import("@sinclair/typebox/build/esm/index.mjs").TArray<T>;
}>;
export type BundledParams<T> = CommonParams & Bundle<T>;
export interface CommonParamsWithCoin extends CommonParams {
    coin: string;
    identity?: string;
}
export interface Unsuccessful {
    success: false;
    payload: {
        error: string;
        code?: string;
    };
}
export interface Success<T> {
    success: true;
    payload: T;
}
export type Response<T> = Promise<Success<T> | Unsuccessful>;
export type DerivationPath = string | number[];
export declare const DerivationPath: import("@sinclair/typebox/build/esm/index.mjs").TUnion<[import("@sinclair/typebox/build/esm/index.mjs").TString, import("@sinclair/typebox/build/esm/index.mjs").TArray<import("@sinclair/typebox/build/esm/index.mjs").TNumber>]>;
type ProtoWithExtendedAddressN<T, A, R> = Omit<Extract<T, {
    address_n: A;
}>, 'address_n'> & {
    address_n: R;
};
type ProtoWithoutAddressN<T, A> = Exclude<T, {
    address_n: A;
}>;
export type ProtoWithDerivationPath<T> = ProtoWithoutAddressN<T, number[]> | ProtoWithExtendedAddressN<T, number[], DerivationPath>;
export type ProtoWithAddressN<P extends ProtoWithDerivationPath<any>> = P extends ProtoWithDerivationPath<infer T> ? T : unknown;
export type GetAddress = Static<typeof GetAddress>;
export declare const GetAddress: import("@trezor/schema-utils").TObject<{
    path: import("@sinclair/typebox/build/esm/index.mjs").TUnion<[import("@sinclair/typebox/build/esm/index.mjs").TString, import("@sinclair/typebox/build/esm/index.mjs").TArray<import("@sinclair/typebox/build/esm/index.mjs").TNumber>]>;
    address: import("@sinclair/typebox/build/esm/index.mjs").TOptional<import("@sinclair/typebox/build/esm/index.mjs").TString>;
    showOnTrezor: import("@sinclair/typebox/build/esm/index.mjs").TOptional<import("@sinclair/typebox/build/esm/index.mjs").TBoolean>;
    chunkify: import("@sinclair/typebox/build/esm/index.mjs").TOptional<import("@sinclair/typebox/build/esm/index.mjs").TBoolean>;
    useEventListener: import("@sinclair/typebox/build/esm/index.mjs").TOptional<import("@sinclair/typebox/build/esm/index.mjs").TBoolean>;
}>;
export interface Address {
    address: string;
    path: number[];
    serializedPath: string;
}
export type GetPublicKey = Static<typeof GetPublicKey>;
export declare const GetPublicKey: import("@trezor/schema-utils").TObject<{
    path: import("@sinclair/typebox/build/esm/index.mjs").TUnion<[import("@sinclair/typebox/build/esm/index.mjs").TString, import("@sinclair/typebox/build/esm/index.mjs").TArray<import("@sinclair/typebox/build/esm/index.mjs").TNumber>]>;
    showOnTrezor: import("@sinclair/typebox/build/esm/index.mjs").TOptional<import("@sinclair/typebox/build/esm/index.mjs").TBoolean>;
    suppressBackupWarning: import("@sinclair/typebox/build/esm/index.mjs").TOptional<import("@sinclair/typebox/build/esm/index.mjs").TBoolean>;
    chunkify: import("@sinclair/typebox/build/esm/index.mjs").TOptional<import("@sinclair/typebox/build/esm/index.mjs").TBoolean>;
}>;
export type PublicKey = Static<typeof PublicKey>;
export declare const PublicKey: import("@trezor/schema-utils").TObject<{
    publicKey: import("@sinclair/typebox/build/esm/index.mjs").TString;
    path: import("@sinclair/typebox/build/esm/index.mjs").TArray<import("@sinclair/typebox/build/esm/index.mjs").TNumber>;
    serializedPath: import("@sinclair/typebox/build/esm/index.mjs").TString;
}>;
export {};
//# sourceMappingURL=params.d.ts.map