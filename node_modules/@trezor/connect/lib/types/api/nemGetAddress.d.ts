import { Static } from '@trezor/schema-utils';
import { Address, Params, BundledParams, Response } from '../params';
export type NEMGetAddress = Static<typeof NEMGetAddress>;
export declare const NEMGetAddress: import("@trezor/schema-utils").TObject<{
    path: import("@sinclair/typebox/build/esm/index.mjs").TUnion<[import("@sinclair/typebox/build/esm/index.mjs").TString, import("@sinclair/typebox/build/esm/index.mjs").TArray<import("@sinclair/typebox/build/esm/index.mjs").TNumber>]>;
    address: import("@sinclair/typebox/build/esm/index.mjs").TOptional<import("@sinclair/typebox/build/esm/index.mjs").TString>;
    showOnTrezor: import("@sinclair/typebox/build/esm/index.mjs").TOptional<import("@sinclair/typebox/build/esm/index.mjs").TBoolean>;
    chunkify: import("@sinclair/typebox/build/esm/index.mjs").TOptional<import("@sinclair/typebox/build/esm/index.mjs").TBoolean>;
    useEventListener: import("@sinclair/typebox/build/esm/index.mjs").TOptional<import("@sinclair/typebox/build/esm/index.mjs").TBoolean>;
    network: import("@sinclair/typebox/build/esm/index.mjs").TNumber;
}>;
export declare function nemGetAddress(params: Params<NEMGetAddress>): Response<Address>;
export declare function nemGetAddress(params: BundledParams<NEMGetAddress>): Response<Address[]>;
//# sourceMappingURL=nemGetAddress.d.ts.map