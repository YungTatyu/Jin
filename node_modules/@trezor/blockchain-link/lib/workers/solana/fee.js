"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPriorityFee = exports.getBaseFee = void 0;
const tslib_1 = require("tslib");
const web3_js_1 = require("@solana/web3.js");
const bigNumber_1 = require("@trezor/utils/lib/bigNumber");
const COMPUTE_BUDGET_PROGRAM_ID = 'ComputeBudget111111111111111111111111111111';
const DEFAULT_COMPUTE_UNIT_PRICE_MICROLAMPORTS = 100000;
const DEFAULT_COMPUTE_UNIT_LIMIT = 200000;
const getBaseFee = (api, message) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const messageWithoutComputeBudget = new web3_js_1.Message({
        header: message.header,
        accountKeys: message.accountKeys,
        recentBlockhash: message.recentBlockhash,
        instructions: message.instructions.filter(instruction => message.accountKeys[instruction.programIdIndex].toBase58() !==
            COMPUTE_BUDGET_PROGRAM_ID),
    });
    const result = yield api.getFeeForMessage(messageWithoutComputeBudget);
    if (result.value == null) {
        throw new Error('Could not estimate fee for transaction.');
    }
    return result.value;
});
exports.getBaseFee = getBaseFee;
const getPriorityFee = (api, message) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const affectedAccounts = message
        .getAccountKeys()
        .staticAccountKeys.filter((_, i) => message.isAccountWritable(i))
        .map(key => key.toString());
    const recentFees = yield api.getRecentPrioritizationFees({
        lockedWritableAccounts: affectedAccounts.map(a => new web3_js_1.PublicKey(a)),
    });
    const computeUnitLimit = DEFAULT_COMPUTE_UNIT_LIMIT;
    const networkPriorityFee = recentFees.map(a => a.prioritizationFee).sort((a, b) => b - a)[Math.floor(recentFees.length / 4)];
    const computeUnitPrice = new bigNumber_1.BigNumber(Math.max(networkPriorityFee, DEFAULT_COMPUTE_UNIT_PRICE_MICROLAMPORTS));
    const fee = computeUnitPrice
        .times(Math.pow(10, -6))
        .times(computeUnitLimit)
        .decimalPlaces(0, bigNumber_1.BigNumber.ROUND_UP)
        .toNumber();
    return { computeUnitPrice: computeUnitPrice.toNumber(), computeUnitLimit, fee };
});
exports.getPriorityFee = getPriorityFee;
//# sourceMappingURL=fee.js.map