export type HttpRequestOptions = {
    body?: Array<any> | Record<string, unknown> | string;
    url: string;
    method: 'POST' | 'GET';
    skipContentTypeHeader?: boolean;
    signal?: AbortSignal;
    timeout?: number;
};
export declare function bridgeApiCall(options: HttpRequestOptions): Promise<{
    success: false;
    error: "Malformed protocol format";
    message: string | undefined;
} | {
    success: false;
    error: NonNullable<"Unable to open device" | "Unable to close device" | "A transfer error has occurred." | "device not found" | "Device unreadable" | "wrong previous session" | "session not found" | "descriptor not found" | "sessions background did not respond" | "already listening" | "interface not available" | "Wrong result type." | "This transport can not be used in this environment" | "device disconnected during action" | "other call in progress" | "Network request failed" | "unexpected error" | "Aborted by signal" | "Aborted by timeout">;
    message: string | undefined;
} | import("../types").Success<string | Record<string, unknown>>>;
//# sourceMappingURL=bridgeApiCall.d.ts.map