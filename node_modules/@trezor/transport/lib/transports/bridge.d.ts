import { Deferred } from '@trezor/utils';
import { AbstractTransport, AbstractTransportParams, AbstractTransportMethodParams } from './abstract';
import { Descriptor } from '../types';
type BridgeConstructorParameters = AbstractTransportParams & {
    url?: string;
    latestVersion?: string;
};
export declare class BridgeTransport extends AbstractTransport {
    private latestVersion?;
    private useProtocolMessages;
    private url;
    protected acquirePromise?: Deferred<boolean>;
    name: "BridgeTransport";
    constructor(params: BridgeConstructorParameters);
    init({ signal }?: AbstractTransportMethodParams<'init'>): Promise<import("../types").Success<undefined> | {
        success: false;
        error: "unexpected error";
    } | {
        success: false;
        error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
        message: string | undefined;
    } | {
        success: false;
        error: "unexpected error";
        message: string;
    } | {
        success: false;
        error: "Wrong result type.";
    } | {
        success: false;
        error: "Network request failed";
    }>;
    listen(): import("../types").Success<undefined> | {
        success: false;
        error: "already listening";
        message: string | undefined;
    };
    private listenLoop;
    enumerate({ signal }?: AbstractTransportMethodParams<'enumerate'>): Promise<{
        success: false;
        error: "unexpected error";
    } | {
        success: false;
        error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
        message: string | undefined;
    } | {
        success: false;
        error: "unexpected error";
        message: string;
    } | {
        success: false;
        error: "Wrong result type.";
    } | {
        success: false;
        error: "Network request failed";
    } | import("../types").Success<Descriptor[]>>;
    acquire({ input, signal }: AbstractTransportMethodParams<'acquire'>): Promise<import("../types").ResultWithTypedError<`${number}`, "Unable to open device" | "device not found" | "wrong previous session" | "device disconnected during action" | "unexpected error" | "Aborted by signal" | "Aborted by timeout"> | {
        success: false;
        error: "Wrong result type.";
    } | {
        success: false;
        error: "Network request failed";
    } | {
        success: false;
        error: NonNullable<"wrong previous session" | "device disconnected during action" | "Aborted by signal" | "Aborted by timeout">;
        message: string | undefined;
    } | {
        success: false;
        error: "unexpected error";
        message: string;
    }>;
    release({ path, session, onClose, signal }: AbstractTransportMethodParams<'release'>): Promise<import("../types").Success<undefined> | {
        success: false;
        error: "unexpected error";
    } | {
        success: false;
        error: "session not found";
    } | {
        success: false;
        error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
        message: string | undefined;
    } | {
        success: false;
        error: "unexpected error";
        message: string;
    } | {
        success: false;
        error: "Wrong result type.";
    } | {
        success: false;
        error: "Network request failed";
    }>;
    releaseDevice(): Promise<import("../types").Success<undefined>>;
    private getProtocol;
    private getRequestBody;
    call({ session, name, data, protocol: customProtocol, signal, }: AbstractTransportMethodParams<'call'>): Promise<{
        success: false;
        error: "Unable to open device";
    } | {
        success: false;
        error: "device not found";
    } | {
        success: false;
        error: "device disconnected during action";
    } | {
        success: false;
        error: "unexpected error";
    } | {
        success: false;
        error: "Aborted by signal";
    } | {
        success: false;
        error: "Aborted by timeout";
    } | {
        success: false;
        error: "A transfer error has occurred.";
    } | {
        success: false;
        error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
        message: string | undefined;
    } | {
        success: false;
        error: "unexpected error";
        message: string;
    } | {
        success: false;
        error: "Wrong result type.";
    } | {
        success: false;
        error: "Network request failed";
    } | {
        success: false;
        error: "other call in progress";
    } | {
        success: false;
        error: "Malformed protocol format";
    } | import("../types").Success<{
        message: {
            [key: string]: any;
        };
        type: keyof import("@trezor/protobuf/lib/messages").MessageType;
    }>>;
    send({ session, name, data, protocol: customProtocol, signal, }: AbstractTransportMethodParams<'send'>): Promise<import("../types").Success<undefined> | {
        success: false;
        error: "device disconnected during action";
    } | {
        success: false;
        error: "unexpected error";
    } | {
        success: false;
        error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
        message: string | undefined;
    } | {
        success: false;
        error: "unexpected error";
        message: string;
    } | {
        success: false;
        error: "Wrong result type.";
    } | {
        success: false;
        error: "Network request failed";
    } | {
        success: false;
        error: "other call in progress";
    } | {
        success: false;
        error: "Malformed protocol format";
    }>;
    receive({ session, protocol: customProtocol, signal, }: AbstractTransportMethodParams<'receive'>): Promise<{
        success: false;
        error: "Unable to open device";
    } | {
        success: false;
        error: "device not found";
    } | {
        success: false;
        error: "device disconnected during action";
    } | {
        success: false;
        error: "unexpected error";
    } | {
        success: false;
        error: "Aborted by signal";
    } | {
        success: false;
        error: "Aborted by timeout";
    } | {
        success: false;
        error: "A transfer error has occurred.";
    } | {
        success: false;
        error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
        message: string | undefined;
    } | {
        success: false;
        error: "unexpected error";
        message: string;
    } | {
        success: false;
        error: "Wrong result type.";
    } | {
        success: false;
        error: "Network request failed";
    } | {
        success: false;
        error: "other call in progress";
    } | {
        success: false;
        error: "Malformed protocol format";
    } | import("../types").Success<{
        message: {
            [key: string]: any;
        };
        type: keyof import("@trezor/protobuf/lib/messages").MessageType;
    }>>;
    stop(): void;
    private post;
}
export {};
//# sourceMappingURL=bridge.d.ts.map