import { AbstractTransport, AbstractTransportParams, AbstractTransportMethodParams } from './abstract';
import { AbstractApi } from '../api/abstract';
import { SessionsClient } from '../sessions/client';
interface ConstructorParams extends AbstractTransportParams {
    api: AbstractApi;
    sessionsClient: (typeof SessionsClient)['prototype'];
}
export declare abstract class AbstractApiTransport extends AbstractTransport {
    private sessionsClient;
    protected api: AbstractApi;
    constructor({ messages, api, sessionsClient, logger }: ConstructorParams);
    init({ signal }?: AbstractTransportMethodParams<'init'>): Promise<import("../types").Success<undefined> | {
        success: false;
        error: never;
        message: string | undefined;
    } | {
        success: false;
        error: "unexpected error";
        message: string;
    } | {
        success: false;
        error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
        message: string | undefined;
    } | {
        success: false;
        error: "unexpected error";
        message: string;
    }>;
    listen(): import("../types").Success<undefined> | {
        success: false;
        error: "already listening";
        message: string | undefined;
    };
    enumerate({ signal }?: AbstractTransportMethodParams<'enumerate'>): Promise<{
        success: false;
        error: "unexpected error";
    } | {
        success: false;
        error: "Aborted by signal";
    } | {
        success: false;
        error: "Aborted by timeout";
    } | {
        success: false;
        error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
        message: string | undefined;
    } | {
        success: false;
        error: "unexpected error";
        message: string;
    } | import("../types").Success<import("..").Descriptor[]>>;
    acquire({ input, signal }: AbstractTransportMethodParams<'acquire'>): Promise<import("../types").ResultWithTypedError<`${number}`, "Unable to open device" | "device not found" | "wrong previous session" | "device disconnected during action" | "unexpected error" | "Aborted by signal" | "Aborted by timeout"> | {
        success: false;
        error: "wrong previous session" | "descriptor not found";
        message: string | undefined;
    } | {
        success: false;
        error: NonNullable<"wrong previous session" | "device disconnected during action" | "Aborted by signal" | "Aborted by timeout">;
        message: string | undefined;
    } | {
        success: false;
        error: "unexpected error";
        message: string;
    }>;
    release({ path, session, onClose, signal }: AbstractTransportMethodParams<'release'>): Promise<import("../types").Success<undefined> | {
        success: false;
        error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
        message: string | undefined;
    } | {
        success: false;
        error: "unexpected error";
        message: string;
    } | {
        success: false;
        error: "session not found";
        message: string | undefined;
    }>;
    call({ session, name, data, protocol: customProtocol, signal, }: AbstractTransportMethodParams<'call'>): Promise<{
        success: false;
        error: "Unable to open device";
    } | {
        success: false;
        error: "device not found";
    } | {
        success: false;
        error: "device disconnected during action";
    } | {
        success: false;
        error: "unexpected error";
    } | {
        success: false;
        error: "Aborted by signal";
    } | {
        success: false;
        error: "Aborted by timeout";
    } | {
        success: false;
        error: "A transfer error has occurred.";
    } | {
        success: false;
        error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
        message: string | undefined;
    } | {
        success: false;
        error: "unexpected error";
        message: string;
    } | import("../types").Success<{
        message: {
            [key: string]: any;
        };
        type: keyof import("@trezor/protobuf/lib/messages").MessageType;
    }>>;
    send({ data, session, name, protocol, signal }: AbstractTransportMethodParams<'send'>): Promise<{
        success: false;
        error: "Unable to open device";
    } | {
        success: false;
        error: "device not found";
    } | {
        success: false;
        error: "device disconnected during action";
    } | {
        success: false;
        error: "unexpected error";
    } | {
        success: false;
        error: "Aborted by signal";
    } | {
        success: false;
        error: "A transfer error has occurred.";
    } | {
        success: false;
        error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
        message: string | undefined;
    } | {
        success: false;
        error: "unexpected error";
        message: string;
    } | {
        success: false;
        error: "session not found";
        message: string | undefined;
    } | {
        success: true;
        payload: undefined;
    }>;
    receive({ session, protocol: customProtocol, signal, }: AbstractTransportMethodParams<'receive'>): Promise<{
        success: false;
        error: "Unable to open device";
    } | {
        success: false;
        error: "device not found";
    } | {
        success: false;
        error: "device disconnected during action";
    } | {
        success: false;
        error: "unexpected error";
    } | {
        success: false;
        error: "Aborted by signal";
    } | {
        success: false;
        error: "Aborted by timeout";
    } | {
        success: false;
        error: "A transfer error has occurred.";
    } | {
        success: false;
        error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
        message: string | undefined;
    } | {
        success: false;
        error: "unexpected error";
        message: string;
    } | {
        success: false;
        error: "session not found";
        message: string | undefined;
    } | import("../types").Success<{
        message: {
            [key: string]: any;
        };
        type: keyof import("@trezor/protobuf/lib/messages").MessageType;
    }>>;
    releaseDevice(path: string): import("../types").AsyncResultWithTypedError<undefined, "Unable to close device" | "device not found" | "unexpected error">;
    stop(): void;
}
export {};
//# sourceMappingURL=abstractApi.d.ts.map